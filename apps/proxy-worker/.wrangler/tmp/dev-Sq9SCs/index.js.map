{
  "version": 3,
  "sources": ["../bundle-TVfM5D/checked-fetch.js", "../bundle-TVfM5D/strip-cf-connecting-ip-header.js", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/Router.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/StatusError.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/createResponse.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/json.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/error.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/status.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/text.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/html.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/jpeg.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/png.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/webp.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/withContent.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/withCookies.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/withParams.ts", "../../../../../node_modules/.pnpm/itty-router@4.2.2/node_modules/src/src/createCors.ts", "../../../src/utils/crypto.ts", "../../../src/services/KVOAuthStorage.ts", "../../../src/services/OAuthService.ts", "../../../src/services/WebhookReceiver.ts", "../../../src/services/EventStreamer.ts", "../../../src/services/EventStreamDurableObject.ts", "../../../src/index.ts", "../../../../../node_modules/.pnpm/wrangler@3.114.9_@cloudflare+workers-types@4.20250610.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../node_modules/.pnpm/wrangler@3.114.9_@cloudflare+workers-types@4.20250610.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-TVfM5D/middleware-insertion-facade.js", "../../../../../node_modules/.pnpm/wrangler@3.114.9_@cloudflare+workers-types@4.20250610.0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-TVfM5D/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/connor/code/cyrus/apps/proxy-worker/.wrangler/tmp/dev-Sq9SCs",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "import type { OAuthToken, EncryptedOAuthToken } from '../types'\n\nexport class TokenEncryption {\n  private encryptionKey: CryptoKey | null = null\n\n  constructor(private secretKey: string) {}\n\n  /**\n   * Get or create the encryption key\n   */\n  private async getEncryptionKey(): Promise<CryptoKey> {\n    if (!this.encryptionKey) {\n      const encoder = new TextEncoder()\n      const keyData = encoder.encode(this.secretKey.padEnd(32, '0').slice(0, 32))\n      \n      this.encryptionKey = await crypto.subtle.importKey(\n        'raw',\n        keyData,\n        { name: 'AES-GCM' },\n        false,\n        ['encrypt', 'decrypt']\n      )\n    }\n    return this.encryptionKey\n  }\n\n  /**\n   * Encrypt an OAuth token\n   */\n  async encryptToken(token: OAuthToken): Promise<EncryptedOAuthToken> {\n    const key = await this.getEncryptionKey()\n    const iv = crypto.getRandomValues(new Uint8Array(12))\n    const encoder = new TextEncoder()\n\n    // Encrypt access token\n    const accessTokenData = encoder.encode(token.accessToken)\n    const encryptedAccessToken = await crypto.subtle.encrypt(\n      { name: 'AES-GCM', iv },\n      key,\n      accessTokenData\n    )\n\n    // Encrypt refresh token if present\n    let encryptedRefreshToken: ArrayBuffer | undefined\n    if (token.refreshToken) {\n      const refreshTokenData = encoder.encode(token.refreshToken)\n      encryptedRefreshToken = await crypto.subtle.encrypt(\n        { name: 'AES-GCM', iv },\n        key,\n        refreshTokenData\n      )\n    }\n\n    return {\n      ...token,\n      accessToken: this.arrayBufferToBase64(encryptedAccessToken),\n      refreshToken: encryptedRefreshToken \n        ? this.arrayBufferToBase64(encryptedRefreshToken) \n        : undefined,\n      iv: this.arrayBufferToBase64(iv)\n    }\n  }\n\n  /**\n   * Decrypt an OAuth token\n   */\n  async decryptToken(encrypted: EncryptedOAuthToken): Promise<OAuthToken> {\n    const key = await this.getEncryptionKey()\n    const iv = this.base64ToArrayBuffer(encrypted.iv)\n    const decoder = new TextDecoder()\n\n    // Decrypt access token\n    const encryptedAccessToken = this.base64ToArrayBuffer(encrypted.accessToken)\n    const decryptedAccessToken = await crypto.subtle.decrypt(\n      { name: 'AES-GCM', iv },\n      key,\n      encryptedAccessToken\n    )\n\n    // Decrypt refresh token if present\n    let refreshToken: string | undefined\n    if (encrypted.refreshToken) {\n      const encryptedRefreshToken = this.base64ToArrayBuffer(encrypted.refreshToken)\n      const decryptedRefreshToken = await crypto.subtle.decrypt(\n        { name: 'AES-GCM', iv },\n        key,\n        encryptedRefreshToken\n      )\n      refreshToken = decoder.decode(decryptedRefreshToken)\n    }\n\n    return {\n      ...encrypted,\n      accessToken: decoder.decode(decryptedAccessToken),\n      refreshToken,\n      iv: undefined as any // Remove IV from decrypted token\n    }\n  }\n\n  /**\n   * Hash a token for storage (one-way)\n   */\n  async hashToken(token: string): Promise<string> {\n    const encoder = new TextEncoder()\n    const data = encoder.encode(token)\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data)\n    return this.arrayBufferToHex(hashBuffer)\n  }\n\n  /**\n   * Convert ArrayBuffer to base64\n   */\n  private arrayBufferToBase64(buffer: ArrayBuffer): string {\n    const bytes = new Uint8Array(buffer)\n    const binary = String.fromCharCode(...bytes)\n    return btoa(binary)\n  }\n\n  /**\n   * Convert base64 to ArrayBuffer\n   */\n  private base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binary = atob(base64)\n    const bytes = new Uint8Array(binary.length)\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i)\n    }\n    return bytes.buffer\n  }\n\n  /**\n   * Convert ArrayBuffer to hex string\n   */\n  private arrayBufferToHex(buffer: ArrayBuffer): string {\n    const bytes = new Uint8Array(buffer)\n    return Array.from(bytes)\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('')\n  }\n}", "import type { Env, OAuthToken, EncryptedOAuthToken } from '../types'\nimport { TokenEncryption } from '../utils/crypto'\n\nexport interface OAuthTokenStorage {\n  saveToken(workspaceId: string, tokenData: OAuthToken): Promise<void>\n  getToken(workspaceId: string): Promise<OAuthToken | null>\n  deleteToken(workspaceId: string): Promise<void>\n  refreshToken?(workspaceId: string): Promise<OAuthToken>\n}\n\nexport class KVOAuthStorage implements OAuthTokenStorage {\n  private crypto: TokenEncryption\n\n  constructor(\n    private kv: KVNamespace,\n    encryptionKey: string\n  ) {\n    this.crypto = new TokenEncryption(encryptionKey)\n  }\n\n  /**\n   * Save an OAuth token to KV\n   */\n  async saveToken(workspaceId: string, tokenData: OAuthToken): Promise<void> {\n    // Encrypt sensitive data\n    const encrypted = await this.crypto.encryptToken(tokenData)\n    \n    // Calculate TTL based on expiration\n    const ttl = tokenData.expiresAt \n      ? Math.max(1, Math.floor((tokenData.expiresAt - Date.now()) / 1000))\n      : undefined\n    \n    // Store in KV\n    await this.kv.put(\n      `oauth:token:${workspaceId}`,\n      JSON.stringify(encrypted),\n      { expirationTtl: ttl }\n    )\n  }\n\n  /**\n   * Get an OAuth token from KV\n   */\n  async getToken(workspaceId: string): Promise<OAuthToken | null> {\n    const data = await this.kv.get(`oauth:token:${workspaceId}`)\n    if (!data) return null\n    \n    try {\n      const encrypted: EncryptedOAuthToken = JSON.parse(data)\n      return await this.crypto.decryptToken(encrypted)\n    } catch (error) {\n      console.error('Failed to decrypt token:', error)\n      // Token might be corrupted, delete it\n      await this.deleteToken(workspaceId)\n      return null\n    }\n  }\n\n  /**\n   * Delete an OAuth token\n   */\n  async deleteToken(workspaceId: string): Promise<void> {\n    await this.kv.delete(`oauth:token:${workspaceId}`)\n  }\n\n  /**\n   * Refresh an OAuth token (to be implemented with Linear API)\n   */\n  async refreshToken(workspaceId: string): Promise<OAuthToken> {\n    const currentToken = await this.getToken(workspaceId)\n    if (!currentToken) {\n      throw new Error('No token found to refresh')\n    }\n\n    if (!currentToken.refreshToken) {\n      throw new Error('No refresh token available')\n    }\n\n    // TODO: Implement actual refresh logic with Linear API\n    // For now, throw an error\n    throw new Error('Token refresh not yet implemented')\n  }\n}", "import type { Env, OAuthState, OAuthToken, WorkspaceMetadata } from '../types'\nimport { KVOAuthStorage } from './KVOAuthStorage'\n\nexport class OAuthService {\n  private tokenStorage: KVOAuthStorage\n\n  constructor(\n    private env: Env,\n    private onAuthSuccess?: (tokenInfo: OAuthToken, workspaceInfo: WorkspaceMetadata) => Promise<void>\n  ) {\n    this.tokenStorage = new KVOAuthStorage(env.OAUTH_TOKENS, env.ENCRYPTION_KEY)\n  }\n\n  /**\n   * Handle OAuth authorization request\n   */\n  async handleAuthorize(request: Request): Promise<Response> {\n    // Generate state for CSRF protection\n    const state = crypto.randomUUID()\n    \n    // Store state in KV with TTL\n    await this.env.OAUTH_STATE.put(\n      `oauth:state:${state}`,\n      JSON.stringify({\n        createdAt: Date.now(),\n        redirectUri: this.env.OAUTH_REDIRECT_URI\n      } satisfies OAuthState),\n      { expirationTtl: 600 } // 10 minutes\n    )\n    \n    // Build Linear OAuth URL\n    const authUrl = new URL('https://linear.app/oauth/authorize')\n    authUrl.searchParams.set('client_id', this.env.LINEAR_CLIENT_ID)\n    authUrl.searchParams.set('redirect_uri', this.env.OAUTH_REDIRECT_URI)\n    authUrl.searchParams.set('response_type', 'code')\n    authUrl.searchParams.set('state', state)\n    authUrl.searchParams.set('scope', 'read write issues:create comments:create')\n    authUrl.searchParams.set('actor', 'application')\n    authUrl.searchParams.set('prompt', 'consent')\n    \n    return Response.redirect(authUrl.toString(), 302)\n  }\n\n  /**\n   * Handle OAuth callback\n   */\n  async handleCallback(request: Request): Promise<Response> {\n    const url = new URL(request.url)\n    const code = url.searchParams.get('code')\n    const state = url.searchParams.get('state')\n    \n    if (!code || !state) {\n      return new Response('Missing code or state', { status: 400 })\n    }\n    \n    // Validate state\n    const stateData = await this.env.OAUTH_STATE.get(`oauth:state:${state}`)\n    if (!stateData) {\n      return new Response('Invalid or expired state', { status: 400 })\n    }\n    \n    // Delete state after use\n    await this.env.OAUTH_STATE.delete(`oauth:state:${state}`)\n    \n    try {\n      // Exchange code for token\n      const tokenResponse = await this.exchangeCodeForToken(code)\n      \n      // Get workspace info from token\n      const workspaceInfo = await this.getWorkspaceInfo(tokenResponse.access_token)\n      \n      // Create token object\n      const token: OAuthToken = {\n        accessToken: tokenResponse.access_token,\n        refreshToken: tokenResponse.refresh_token,\n        expiresAt: Date.now() + (tokenResponse.expires_in * 1000),\n        obtainedAt: Date.now(),\n        scope: tokenResponse.scope.split(' '),\n        tokenType: tokenResponse.token_type,\n        userId: workspaceInfo.userId,\n        userEmail: workspaceInfo.userEmail,\n        workspaceName: workspaceInfo.organization.name\n      }\n      \n      // Store token in KV\n      await this.tokenStorage.saveToken(workspaceInfo.organization.id, token)\n      \n      // Store workspace metadata\n      await this.storeWorkspaceMetadata(workspaceInfo)\n      \n      // Call success handler if provided\n      if (this.onAuthSuccess) {\n        await this.onAuthSuccess(token, {\n          id: workspaceInfo.organization.id,\n          name: workspaceInfo.organization.name,\n          urlKey: workspaceInfo.organization.urlKey,\n          organizationId: workspaceInfo.organization.id,\n          teams: workspaceInfo.organization.teams?.nodes || []\n        })\n      }\n      \n      // Generate edge token for the workspace\n      const edgeToken = await this.generateEdgeToken([workspaceInfo.organization.id])\n      \n      // Return success page with instructions\n      return new Response(`\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <title>OAuth Success - Cyrus</title>\n          <style>\n            body { font-family: system-ui; max-width: 600px; margin: 50px auto; padding: 20px; }\n            .success { color: #10b981; }\n            .token-box { background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0; }\n            .token { font-family: monospace; word-break: break-all; }\n            button { background: #3b82f6; color: white; padding: 10px 20px; border: none; border-radius: 6px; cursor: pointer; }\n            button:hover { background: #2563eb; }\n          </style>\n        </head>\n        <body>\n          <h1 class=\"success\">\u2705 Authorization Successful!</h1>\n          <p>You've successfully connected <strong>${workspaceInfo.organization.name}</strong> to Cyrus.</p>\n          \n          <div class=\"token-box\">\n            <h3>Your Edge Worker Configuration:</h3>\n            <p>Add these to your edge worker's environment:</p>\n            <pre>\nPROXY_URL=${url.origin}\nEDGE_TOKEN=<span class=\"token\" id=\"token\">${edgeToken}</span>\nLINEAR_OAUTH_TOKEN=<span class=\"token\">[Already stored securely]</span>\n            </pre>\n            <button onclick=\"copyToken()\">Copy Edge Token</button>\n          </div>\n          \n          <p>The OAuth token has been securely stored and will be used by the proxy to authenticate with Linear.</p>\n          \n          <script>\n            function copyToken() {\n              const token = document.getElementById('token').textContent;\n              navigator.clipboard.writeText(token).then(() => {\n                alert('Edge token copied to clipboard!');\n              });\n            }\n          </script>\n        </body>\n        </html>\n      `, {\n        status: 200,\n        headers: { 'Content-Type': 'text/html' }\n      })\n    } catch (error) {\n      console.error('OAuth callback error:', error)\n      return new Response(`OAuth failed: ${error.message}`, { status: 500 })\n    }\n  }\n\n  /**\n   * Exchange authorization code for access token\n   */\n  private async exchangeCodeForToken(code: string): Promise<any> {\n    const response = await fetch('https://api.linear.app/oauth/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        grant_type: 'authorization_code',\n        client_id: this.env.LINEAR_CLIENT_ID,\n        client_secret: this.env.LINEAR_CLIENT_SECRET,\n        redirect_uri: this.env.OAUTH_REDIRECT_URI,\n        code: code,\n      }),\n    })\n\n    if (!response.ok) {\n      const error = await response.text()\n      throw new Error(`Token exchange failed: ${error}`)\n    }\n\n    return await response.json()\n  }\n\n  /**\n   * Get workspace information using access token\n   */\n  private async getWorkspaceInfo(accessToken: string): Promise<any> {\n    const response = await fetch('https://api.linear.app/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            viewer {\n              id\n              name\n              email\n              organization {\n                id\n                name\n                urlKey\n                teams {\n                  nodes {\n                    id\n                    key\n                    name\n                  }\n                }\n              }\n            }\n          }\n        `\n      })\n    })\n\n    if (!response.ok) {\n      throw new Error('Failed to get workspace info')\n    }\n\n    const data = await response.json()\n    \n    if (data.errors) {\n      throw new Error(`GraphQL errors: ${JSON.stringify(data.errors)}`)\n    }\n\n    return {\n      userId: data.data.viewer.id,\n      userEmail: data.data.viewer.email,\n      organization: data.data.viewer.organization\n    }\n  }\n\n  /**\n   * Store workspace metadata in KV\n   */\n  private async storeWorkspaceMetadata(workspaceInfo: any): Promise<void> {\n    const metadata: WorkspaceMetadata = {\n      id: workspaceInfo.organization.id,\n      name: workspaceInfo.organization.name,\n      urlKey: workspaceInfo.organization.urlKey,\n      organizationId: workspaceInfo.organization.id,\n      teams: workspaceInfo.organization.teams?.nodes || []\n    }\n\n    await this.env.WORKSPACE_METADATA.put(\n      `workspace:meta:${metadata.id}`,\n      JSON.stringify(metadata),\n      { expirationTtl: 86400 } // 24 hours\n    )\n  }\n\n  /**\n   * Generate an edge token for the given workspace IDs\n   */\n  private async generateEdgeToken(workspaceIds: string[]): Promise<string> {\n    // Generate secure random token\n    const tokenBytes = crypto.getRandomValues(new Uint8Array(32))\n    const token = btoa(String.fromCharCode(...tokenBytes))\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=/g, '')\n    \n    // Hash token for storage\n    const hashedToken = await this.hashToken(token)\n    \n    // Store token metadata\n    await this.env.EDGE_TOKENS.put(\n      `edge:token:${hashedToken}`,\n      JSON.stringify({\n        workspaceIds,\n        createdAt: Date.now(),\n        lastUsed: Date.now(),\n        permissions: ['read', 'write']\n      })\n    )\n    \n    return token\n  }\n\n  /**\n   * Hash a token using SHA-256\n   */\n  private async hashToken(token: string): Promise<string> {\n    const encoder = new TextEncoder()\n    const data = encoder.encode(token)\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data)\n    const hashArray = Array.from(new Uint8Array(hashBuffer))\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n  }\n}", "import type { Env, LinearWebhook } from '../types'\n\nexport class WebhookReceiver {\n  constructor(\n    private env: Env,\n    private onWebhook: (webhook: LinearWebhook) => Promise<void>\n  ) {}\n\n  /**\n   * Handle incoming webhook\n   */\n  async handleWebhook(request: Request): Promise<Response> {\n    // Verify webhook signature\n    const signature = request.headers.get('linear-signature')\n    if (!signature) {\n      return new Response('Missing signature', { status: 401 })\n    }\n\n    // Get raw body for signature verification\n    const rawBody = await request.text()\n    \n    // Verify signature\n    const isValid = await this.verifyWebhookSignature(rawBody, signature)\n    if (!isValid) {\n      return new Response('Invalid signature', { status: 401 })\n    }\n\n    try {\n      // Parse webhook payload\n      const webhook: LinearWebhook = JSON.parse(rawBody)\n      \n      // Log webhook type\n      console.log(`Received webhook: ${webhook.type}/${webhook.action || webhook.notification?.type}`)\n      \n      // Process webhook\n      await this.onWebhook(webhook)\n      \n      return new Response('OK', { status: 200 })\n    } catch (error) {\n      console.error('Webhook processing error:', error)\n      return new Response('Processing error', { status: 500 })\n    }\n  }\n\n  /**\n   * Verify webhook signature using HMAC-SHA256\n   */\n  private async verifyWebhookSignature(payload: string, signature: string): Promise<boolean> {\n    try {\n      // Create HMAC key\n      const encoder = new TextEncoder()\n      const key = await crypto.subtle.importKey(\n        'raw',\n        encoder.encode(this.env.LINEAR_WEBHOOK_SECRET),\n        { name: 'HMAC', hash: 'SHA-256' },\n        false,\n        ['sign', 'verify']\n      )\n\n      // Sign the payload\n      const signatureBuffer = await crypto.subtle.sign(\n        'HMAC',\n        key,\n        encoder.encode(payload)\n      )\n\n      // Convert to hex string\n      const computedSignature = Array.from(new Uint8Array(signatureBuffer))\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('')\n\n      // Compare signatures\n      return computedSignature === signature\n    } catch (error) {\n      console.error('Signature verification error:', error)\n      return false\n    }\n  }\n}", "import type { Env, EdgeEvent, LinearWebhook, EdgeToken } from '../types'\nimport { TokenEncryption } from '../utils/crypto'\n\nexport class EventStreamer {\n  private crypto: TokenEncryption\n  private eventCounter = 0\n\n  constructor(private env: Env) {\n    this.crypto = new TokenEncryption(env.ENCRYPTION_KEY)\n  }\n\n  /**\n   * Handle event stream request\n   */\n  async handleStream(request: Request): Promise<Response> {\n    // Extract edge authentication\n    const authHeader = request.headers.get('authorization')\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response('Missing or invalid authorization header', { status: 401 })\n    }\n\n    const edgeToken = authHeader.substring(7)\n    \n    // Validate token and get workspace access\n    const workspaceIds = await this.validateEdgeToken(edgeToken)\n    \n    if (!workspaceIds || workspaceIds.length === 0) {\n      return new Response('Invalid token or no workspace access', { status: 401 })\n    }\n    \n    // Get durable object for this edge worker\n    const edgeId = await this.crypto.hashToken(edgeToken)\n    const durableObjectId = this.env.EVENT_STREAM.idFromName(edgeId)\n    const durableObject = this.env.EVENT_STREAM.get(durableObjectId)\n    \n    // Forward request to durable object with workspace info\n    const url = new URL(request.url)\n    url.searchParams.set('workspaceIds', workspaceIds.join(','))\n    \n    return durableObject.fetch(new Request(url, request))\n  }\n\n  /**\n   * Handle status update from edge worker\n   */\n  async handleStatus(request: Request): Promise<Response> {\n    const { eventId, status, error } = await request.json()\n    \n    // Extract edge authentication\n    const authHeader = request.headers.get('authorization')\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response('Missing or invalid authorization header', { status: 401 })\n    }\n\n    const edgeToken = authHeader.substring(7)\n    const edgeId = await this.crypto.hashToken(edgeToken)\n    \n    console.log(`Edge ${edgeId.substring(0, 8)}... reported status for event ${eventId}: ${status}`)\n    \n    // TODO: Handle status update (update Linear, etc.)\n    \n    return new Response(JSON.stringify({ received: true }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n\n  /**\n   * Validate edge token and return workspace IDs\n   */\n  private async validateEdgeToken(token: string): Promise<string[] | null> {\n    const hashedToken = await this.crypto.hashToken(token)\n    const data = await this.env.EDGE_TOKENS.get(`edge:token:${hashedToken}`)\n    \n    if (!data) return null\n    \n    const tokenData: EdgeToken = JSON.parse(data)\n    \n    // Update last used\n    await this.env.EDGE_TOKENS.put(\n      `edge:token:${hashedToken}`,\n      JSON.stringify({\n        ...tokenData,\n        lastUsed: Date.now()\n      })\n    )\n    \n    return tokenData.workspaceIds\n  }\n\n  /**\n   * Transform webhook to streaming event\n   */\n  transformWebhookToEvent(webhook: LinearWebhook): EdgeEvent {\n    this.eventCounter++\n    \n    return {\n      id: `evt_${this.eventCounter}_${Date.now()}`,\n      type: 'webhook',\n      timestamp: new Date().toISOString(),\n      data: webhook\n    }\n  }\n\n  /**\n   * Broadcast event to edge workers for a workspace\n   */\n  async broadcastToWorkspace(event: EdgeEvent, workspaceId: string): Promise<number> {\n    // Get all edge workers that have access to this workspace\n    const edgeWorkers = await this.getEdgeWorkersForWorkspace(workspaceId)\n    \n    let successCount = 0\n    \n    for (const edgeId of edgeWorkers) {\n      try {\n        const durableObjectId = this.env.EVENT_STREAM.idFromName(edgeId)\n        const durableObject = this.env.EVENT_STREAM.get(durableObjectId)\n        \n        // Send event to durable object\n        const response = await durableObject.fetch(\n          new Request('http://internal/send-event', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(event)\n          })\n        )\n        \n        if (response.ok) {\n          successCount++\n        }\n      } catch (error) {\n        console.error(`Failed to send event to edge ${edgeId}:`, error)\n      }\n    }\n    \n    return successCount\n  }\n\n  /**\n   * Get all edge workers that have access to a workspace\n   */\n  private async getEdgeWorkersForWorkspace(workspaceId: string): Promise<string[]> {\n    const edgeWorkers: string[] = []\n    \n    // List all edge tokens\n    const list = await this.env.EDGE_TOKENS.list({ prefix: 'edge:token:' })\n    \n    for (const key of list.keys) {\n      const data = await this.env.EDGE_TOKENS.get(key.name)\n      if (data) {\n        const tokenData: EdgeToken = JSON.parse(data)\n        if (tokenData.workspaceIds.includes(workspaceId)) {\n          // Extract edge ID from key\n          const edgeId = key.name.replace('edge:token:', '')\n          edgeWorkers.push(edgeId)\n        }\n      }\n    }\n    \n    return edgeWorkers\n  }\n}", "import type { EdgeEvent } from '../types'\n\nexport class EventStreamDurableObject {\n  private state: DurableObjectState\n  private env: any\n  private connections: Map<string, { response: Response, writer: WritableStreamDefaultWriter }> = new Map()\n  private workspaceIds: string[] = []\n  private heartbeatInterval?: number\n\n  constructor(state: DurableObjectState, env: any) {\n    this.state = state\n    this.env = env\n  }\n\n  async fetch(request: Request): Promise<Response> {\n    const url = new URL(request.url)\n    \n    // Handle internal event sending\n    if (url.pathname === '/send-event' && request.method === 'POST') {\n      return this.handleSendEvent(request)\n    }\n    \n    // Handle NDJSON streaming\n    if (url.pathname === '/events/stream') {\n      return this.handleEventStream(request)\n    }\n    \n    return new Response('Not found', { status: 404 })\n  }\n\n  /**\n   * Handle NDJSON event stream connection\n   */\n  private async handleEventStream(request: Request): Promise<Response> {\n    // Extract workspace IDs from query params\n    const url = new URL(request.url)\n    const workspaceIdsParam = url.searchParams.get('workspaceIds')\n    if (workspaceIdsParam) {\n      this.workspaceIds = workspaceIdsParam.split(',')\n    }\n    \n    // Create NDJSON stream\n    const { readable, writable } = new TransformStream()\n    const writer = writable.getWriter()\n    \n    // Generate connection ID\n    const connectionId = crypto.randomUUID()\n    \n    // Send initial connection event\n    await this.sendEvent(writer, {\n      type: 'connection',\n      status: 'connected',\n      timestamp: new Date().toISOString()\n    })\n    \n    // Store connection\n    const response = new Response(readable, {\n      headers: {\n        'Content-Type': 'application/x-ndjson',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n        'X-Accel-Buffering': 'no',\n      }\n    })\n    \n    this.connections.set(connectionId, { response, writer })\n    \n    // Set up heartbeat if not already running\n    if (!this.heartbeatInterval) {\n      this.heartbeatInterval = setInterval(() => {\n        this.sendHeartbeat()\n      }, 30000) as any // 30 seconds\n    }\n    \n    // Handle connection close\n    request.signal.addEventListener('abort', () => {\n      this.connections.delete(connectionId)\n      writer.close().catch(() => {})\n      \n      // Clear heartbeat if no more connections\n      if (this.connections.size === 0 && this.heartbeatInterval) {\n        clearInterval(this.heartbeatInterval)\n        this.heartbeatInterval = undefined\n      }\n    })\n    \n    return response\n  }\n\n  /**\n   * Handle sending event to all connections\n   */\n  private async handleSendEvent(request: Request): Promise<Response> {\n    try {\n      const event: EdgeEvent = await request.json()\n      \n      // Send to all active connections\n      const promises: Promise<void>[] = []\n      const deadConnections: string[] = []\n      \n      for (const [id, connection] of this.connections) {\n        promises.push(\n          this.sendEvent(connection.writer, event).catch(() => {\n            deadConnections.push(id)\n          })\n        )\n      }\n      \n      await Promise.all(promises)\n      \n      // Clean up dead connections\n      for (const id of deadConnections) {\n        this.connections.delete(id)\n      }\n      \n      return new Response(JSON.stringify({ sent: this.connections.size }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    } catch (error) {\n      return new Response('Failed to send event', { status: 500 })\n    }\n  }\n\n  /**\n   * Send event to a writer\n   */\n  private async sendEvent(writer: WritableStreamDefaultWriter, event: Omit<EdgeEvent, 'id'>): Promise<void> {\n    const fullEvent: EdgeEvent = {\n      ...event,\n      id: event.id || `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n    }\n    \n    const line = JSON.stringify(fullEvent) + '\\n'\n    const encoder = new TextEncoder()\n    await writer.write(encoder.encode(line))\n  }\n\n  /**\n   * Send heartbeat to all connections\n   */\n  private async sendHeartbeat(): Promise<void> {\n    const heartbeat: Omit<EdgeEvent, 'id'> = {\n      type: 'heartbeat',\n      timestamp: new Date().toISOString()\n    }\n    \n    const deadConnections: string[] = []\n    \n    for (const [id, connection] of this.connections) {\n      try {\n        await this.sendEvent(connection.writer, heartbeat)\n      } catch {\n        deadConnections.push(id)\n      }\n    }\n    \n    // Clean up dead connections\n    for (const id of deadConnections) {\n      this.connections.delete(id)\n    }\n    \n    // Clear heartbeat if no more connections\n    if (this.connections.size === 0 && this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval)\n      this.heartbeatInterval = undefined\n    }\n  }\n}", "import { Router } from 'itty-router'\nimport type { Env, LinearWebhook } from './types'\nimport { OAuthService } from './services/OAuthService'\nimport { WebhookReceiver } from './services/WebhookReceiver'\nimport { EventStreamer } from './services/EventStreamer'\n\n// Export Durable Object\nexport { EventStreamDurableObject } from './services/EventStreamDurableObject'\n\nconst router = Router()\n\n// Dashboard\nrouter.get('/', (request: Request, env: Env) => {\n  return new Response(`\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Cyrus Edge Proxy</title>\n      <style>\n        body { font-family: system-ui; max-width: 600px; margin: 50px auto; padding: 20px; }\n        .endpoint { background: #f3f4f6; padding: 15px; margin: 10px 0; border-radius: 8px; }\n        .method { font-weight: bold; color: #3b82f6; }\n        a { color: #3b82f6; text-decoration: none; }\n        a:hover { text-decoration: underline; }\n      </style>\n    </head>\n    <body>\n      <h1>\uD83D\uDE80 Cyrus Edge Proxy (Cloudflare Workers)</h1>\n      <p>A distributed OAuth and webhook handler for Linear integration.</p>\n      \n      <h2>Available Endpoints:</h2>\n      \n      <div class=\"endpoint\">\n        <span class=\"method\">GET</span> <a href=\"/oauth/authorize\">/oauth/authorize</a>\n        <p>Start OAuth flow with Linear</p>\n      </div>\n      \n      <div class=\"endpoint\">\n        <span class=\"method\">GET</span> /oauth/callback\n        <p>OAuth callback endpoint (configure in Linear app)</p>\n      </div>\n      \n      <div class=\"endpoint\">\n        <span class=\"method\">POST</span> /webhook\n        <p>Webhook receiver endpoint</p>\n      </div>\n      \n      <div class=\"endpoint\">\n        <span class=\"method\">GET</span> /events/stream\n        <p>NDJSON event stream for edge workers</p>\n      </div>\n      \n      <div class=\"endpoint\">\n        <span class=\"method\">POST</span> /events/status\n        <p>Status updates from edge workers</p>\n      </div>\n      \n      <h2>Configuration:</h2>\n      <p>Edge workers should connect to: <strong>${request.url.replace(/\\/$/, '')}</strong></p>\n    </body>\n    </html>\n  `, {\n    status: 200,\n    headers: { 'Content-Type': 'text/html' }\n  })\n})\n\n// OAuth routes\nrouter.get('/oauth/authorize', async (request: Request, env: Env) => {\n  const oauthService = new OAuthService(env)\n  return oauthService.handleAuthorize(request)\n})\n\nrouter.get('/oauth/callback', async (request: Request, env: Env) => {\n  const oauthService = new OAuthService(env)\n  return oauthService.handleCallback(request)\n})\n\n// Webhook route\nrouter.post('/webhook', async (request: Request, env: Env, ctx: ExecutionContext) => {\n  const eventStreamer = new EventStreamer(env)\n  \n  const webhookReceiver = new WebhookReceiver(env, async (webhook: LinearWebhook) => {\n    // Extract workspace ID from webhook\n    const workspaceId = webhook.organizationId\n    \n    if (!workspaceId) {\n      console.error('No organizationId in webhook, cannot route to edges')\n      return\n    }\n    \n    // Transform webhook to event\n    const event = eventStreamer.transformWebhookToEvent(webhook)\n    \n    // Broadcast to edges in the background\n    ctx.waitUntil(\n      eventStreamer.broadcastToWorkspace(event, workspaceId)\n        .then(count => console.log(`Webhook for workspace ${workspaceId} forwarded to ${count} edge worker(s)`))\n        .catch(error => console.error('Failed to broadcast webhook:', error))\n    )\n  })\n  \n  return webhookReceiver.handleWebhook(request)\n})\n\n// Event streaming routes\nrouter.get('/events/stream', async (request: Request, env: Env) => {\n  const eventStreamer = new EventStreamer(env)\n  return eventStreamer.handleStream(request)\n})\n\nrouter.post('/events/status', async (request: Request, env: Env) => {\n  const eventStreamer = new EventStreamer(env)\n  return eventStreamer.handleStatus(request)\n})\n\n// 404 handler\nrouter.all('*', () => {\n  return new Response('Not found', { status: 404 })\n})\n\n// Export worker\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    try {\n      return await router.handle(request, env, ctx)\n    } catch (error) {\n      console.error('Worker error:', error)\n      return new Response('Internal server error', { status: 500 })\n    }\n  }\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/connor/code/cyrus/apps/proxy-worker/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/connor/code/cyrus/node_modules/.pnpm/wrangler@3.114.9_@cloudflare+workers-types@4.20250610.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/connor/code/cyrus/node_modules/.pnpm/wrangler@3.114.9_@cloudflare+workers-types@4.20250610.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/connor/code/cyrus/apps/proxy-worker/src/index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/connor/code/cyrus/apps/proxy-worker/.wrangler/tmp/bundle-TVfM5D/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/connor/code/cyrus/node_modules/.pnpm/wrangler@3.114.9_@cloudflare+workers-types@4.20250610.0/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/connor/code/cyrus/apps/proxy-worker/.wrangler/tmp/bundle-TVfM5D/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/connor/code/cyrus/apps/proxy-worker/.wrangler/tmp/bundle-TVfM5D/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["Router", "base", "routes", "other", "__proto__", "Proxy", "get", "target", "prop", "receiver", "path", "fetch", "route", "handlers", "push", "toUpperCase", "RegExp", "replace", "async", "request", "args", "response", "match", "url", "URL", "query", "k", "v", "searchParams", "concat", "method", "regex", "pathname", "params", "groups", "handler", "proxy", "createResponse", "format", "transform", "body", "headers", "rest", "constructor", "name", "Response", "entries", "Object", "fromEntries", "json", "JSON", "stringify", "text", "createResponse", "String", "html", "jpeg", "png", "webp", "i", "e", "e"]
}
